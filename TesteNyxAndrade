import logging
import requests
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import os
import json

# Configura√ß√µes
BOT_TOKEN = '7568414357:AAF6xlCGCKelDRsOC7CWFwFs0FxdkuGaMfw'
API_KEY_PUSHINPAY = '32463|gOKr7ALxeKulM7bOd9pQYuVuB5l0dqvfnVEfWRmF508c6e93'  # Gerado em "Configura√ß√µes > Integra√ß√µes"
GRUPO_VIP_ID = -1234567890  # Substitua pelo ID do seu grupo VIP

# Banco de dados
conn = sqlite3.connect('usuarios.db', check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS usuarios (user_id INTEGER, nome TEXT, validade TEXT)''')
conn.commit()

# Boas-vindas
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1 m√™s - R$19,90", callback_data='plano_1')],
        [InlineKeyboardButton("2 meses - R$29,90", callback_data='plano_2')],
        [InlineKeyboardButton("3 meses - R$35,90", callback_data='plano_3')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('üëã Bem-vindo ao Bot VIP!\nEscolha um plano para gerar o Pix:', reply_markup=reply_markup)

# Gerar Pix
async def gerar_pix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    planos = {
        'plano_1': (1990, 30),
        'plano_2': (2990, 60),
        'plano_3': (3590, 90)
    }

    plano_id = query.data
    valor, dias = planos[plano_id]
    user = query.from_user

    url = "https://api.pushinpay.com.br/api/pix/cashIn"
    payload = json.dumps({
        "value": valor,
        "description": f"Acesso VIP por {dias} dias"
    })

    headers = {
         'Authorization':  'Bearer 32463|gOKr7ALxeKulM7bOd9pQYuVuB5l0dqvfnVEfWRmF508c6e93',
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    }

    response = requests.post(url, headers=headers, data=payload)

    if response.status_code == 200:
        cobranca = response.json()
        pix_code = cobranca['payload']['qr_code']
        qr_code_url = cobranca['payload']['qr_code_image']

        legenda = f"‚úÖ PIX gerado para acesso VIP de {dias} dias:\n\nüîÅ Copie e cole:\n`{pix_code}`"
        await query.message.reply_photo(photo=qr_code_url, caption=legenda, parse_mode='Markdown')

        validade = datetime.now() + timedelta(days=dias)
        c.execute("INSERT OR REPLACE INTO usuarios (user_id, nome, validade) VALUES (?, ?, ?)",
                  (user.id, user.full_name, validade.strftime('%Y-%m-%d')))
        conn.commit()

        # Adicionar ao grupo (somente ap√≥s verifica√ß√£o de pagamento real em produ√ß√£o)
        # await context.bot.add_chat_member(chat_id=GRUPO_VIP_ID, user_id=user.id)
    else:
        await query.message.reply_text("‚ùå Erro ao gerar o Pix. Tente novamente mais tarde.")
        logging.error(response.text)

# Verifica√ß√£o di√°ria
async def verificar_validade(context: ContextTypes.DEFAULT_TYPE):
    hoje = datetime.now().date()
    c.execute("SELECT user_id, validade FROM usuarios")
    for user_id, validade_str in c.fetchall():
        validade = datetime.strptime(validade_str, '%Y-%m-%d').date()
        if validade < hoje:
            try:
                await context.bot.send_message(chat_id=user_id, text="‚õî Seu acesso VIP expirou. Renove para continuar.")
                await context.bot.ban_chat_member(chat_id=GRUPO_VIP_ID, user_id=user_id)
                await context.bot.unban_chat_member(chat_id=GRUPO_VIP_ID, user_id=user_id)
            except Exception as e:
                logging.error(f"Erro ao remover {user_id}: {e}")

# Execu√ß√£o
if _name_ == '_main_':
    logging.basicConfig(level=logging.INFO)

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(gerar_pix))
    app.job_queue.run_repeating(verificar_validade, interval=86400, first=10)

    PORT = int(os.environ.get('PORT', 8443))
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=f"https://nyxandradebot.onrender.com/{BOT_TOKEN}"
    )
